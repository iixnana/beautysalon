{"version":3,"sources":["axios/axios.js","store/actions/repositoryActions.js","components/Navigation/Navigation.js","components/Layout/Layout.js","components/Home/Home.js","components/ErrorPages/NotFound/NotFound.js","components/UserComponents/UsersReservations/UsersReservations.js","containers/User/UserDetails/UserDetails.js","hoc/AsyncComponent/AsyncComponent.js","components/ErrorPages/InternalServer/InternalServer.js","UI/Inputs/Input.js","Utility/InputConfiguration.js","Utility/FormUtility.js","components/Modals/SuccessModal/SuccessModal.js","components/Modals/ErrorModal/ErrorModal.js","containers/User/CreateUser/CreateUser.js","containers/User/UpdateUser/UpdateUser.js","containers/User/DeleteUser/DeleteUser.js","containers/App.js","serviceWorker.js","store/reducers/repositoryReducer.js","store/reducers/errorHandlerReducer.js","index.js","store/actions/errorHandlerActions.js","hoc/Auxiliary/Auxiliary.js","store/actions/actionTypes.js"],"names":["instance","axios","create","baseURL","headers","headerType","getData","url","props","dispatch","get","then","response","data","type","actionTypes","catch","error","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","navigation","Col","md","Navbar","collapseOnSelect","bg","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","to","exact","NavItem","eventKey","layout","Container","Row","children","home","notFound","usersReservations","reservations","map","reservation","key","masterId","format","timeStart","timeEnd","Table","responsive","striped","UserDetails","componentDidMount","match","params","onGetData","renderTypeOfUserConditionally","user","length","this","firstName","lastName","phone","UsersReservations","Component","connect","state","repository","repositoryActions","asyncComponent","importComponent","component","cmp","setState","default","C","internalServer","input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","FormGroup","controlId","componentClass","FormLabel","sm","label","FormControl","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","showYearDropdown","dropdownMode","returnInputConfiguration","element","validation","required","valid","maxLength","email","convertStateToArrayOfFormObjects","formObject","formElementsArray","push","config","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","target","validationResponse","validationObject","isValid","trim","checkValidity","countInvalidElements","ownerForm","successModal","Modal","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","Button","bsStyle","onClick","successClick","okButtonText","errorModal","closeModal","CreateUser","userForm","isFormValid","componentWillMount","handleChangeEvent","updatedUserForm","formUtilityActions","counter","createUser","preventDefault","userToCreate","userType","password","onCreateUser","redirectToUserList","history","Jumbotron","Form","horizontal","onSubmit","mdOffset","disabled","SuccessModal","showSuccessModal","onCloseSuccessModal","ErrorModal","showErrorModal","onCloseErrorModal","errorHandler","UpdateUser","onGetUserById","componentWillReceiveProps","nextProps","firstNameObject","lastNameObject","phoneObject","emailObject","updateUser","userToUpdate","creationDate","onUpdateUser","DeleteUser","deleteUser","onDeleteUser","htmlFor","name","AsyncUserList","App","Layout","path","Home","InternalServer","NotFound","Boolean","window","location","hostname","initialState","executeCloseSuccessModal","action","executeGetDataSuccess","executePostDataSuccess","executePutDataSuccess","executeDeleteDataSuccess","reducer","execute404","execute500","executeOtherError","executeCloseErrorModal","rootReducers","combineReducers","repositoryReducer","errorHandlerReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","handleHTTPError","status","execute404Handler","execute500Handler","executeOtherErrorHandler","closeErrorModal","auxiliary","GET_DATA_SUCCESS","POST_DATA_SUCCESS","PUT_DATA_SUCCESS","DELETE_DATA_SUCCESS","HTTP_404_ERROR","HTTP_500_ERROR","HTTP_OTHER_ERROR","CLOSE_ERROR_MODAL","CLOSE_SUCCESS_MODAL"],"mappings":"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","file":"static/js/main.13b4cabb.chunk.js","sourcesContent":["import axios from 'axios';\r\n \r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:5000',\r\n    headers: {\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n \r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios/axios';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\n\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n \r\nexport const getData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.get(url)\r\n        .then(response => {\r\n            dispatch(getDataSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n \r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            dispatch(postDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n \r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n \r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n \r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n \r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nexport const closeSuccessModal = (props, url) =>{\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}","import React from 'react';\r\nimport './Navigation.css';\r\nimport { Col, Navbar, Nav, NavItem } from 'react-bootstrap';\r\n//import { NavLink } from 'react-router-dom';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n \r\nconst navigation = (props) => {\r\n    return (\r\n        <Col md={12} >\r\n            <Navbar collapseOnSelect bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n            <Navbar.Brand href=\"/\">Beauty Salon</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/user-list\">Users list </Nav.Link>\r\n                    <LinkContainer to={'/user-list'} exact>\r\n                        <NavItem eventKey={1}>\r\n                            User\r\n                        </NavItem>\r\n                    </LinkContainer>\r\n                    <LinkContainer to={'/reservations-list'}>\r\n                        <NavItem eventKey={2}>\r\n                            Link 2\r\n                        </NavItem>\r\n                    </LinkContainer>\r\n                </Nav>\r\n                <Nav>\r\n                    <Nav.Link href=\"#deets\">More deets</Nav.Link>\r\n                    <Nav.Link eventKey={2} href=\"#memes\">\r\n                        Dank memes\r\n                    </Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            </Navbar>\r\n        </Col>\r\n    )\r\n}\r\n \r\nexport default navigation;","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Navigation from '../Navigation/Navigation';\r\n \r\nconst layout = (props) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Navigation/>\r\n            </Row>\r\n            <main>\r\n                {props.children}\r\n            </main>\r\n        </Container>\r\n    )\r\n}\r\n \r\nexport default layout;","import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport './Home.css';\r\n \r\nconst home = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <div className={'homeText'}>\r\n                    \"WELCOME TO ACCOUNT-OWNER APPLICATION\"\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n \r\nexport default home;","import React from 'react';\r\nimport './NotFound.css'\r\n \r\nconst notFound = (props) => {\r\n    return (\r\n        <p className={'notFound'}>\r\n            \"404 SORRY COULDN'T FIND IT!!!\"\r\n        </p>\r\n    )\r\n}\r\n \r\nexport default notFound;","import React from 'react';\r\nimport { Row, Col, Table } from 'react-bootstrap';\r\nimport Moment from 'react-moment';\r\n \r\nconst usersReservations = (props) => {\r\n    let reservations = null;\r\n    if (props.reservations) {\r\n        reservations = props.reservations.map(reservation => {\r\n            return (\r\n                <tr key={reservation.id}>\r\n                    <td>{reservation.masterId}</td>\r\n                    <td><Moment format=\"DD/MM/YYYY HH:MM\">{reservation.timeStart}</Moment></td>\r\n                    <td><Moment format=\"DD/MM/YYYY HH:MM\">{reservation.timeEnd}</Moment></td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Table responsive striped>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Master Id</th>\r\n                            <th>Time Start</th>\r\n                            <th>Time End</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {reservations}\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n \r\nexport default usersReservations;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport UsersReservations from '../../../components/UserComponents/UsersReservations/UsersReservations';\r\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\r\n\r\nclass UserDetails extends Component {\r\n    componentDidMount = () => {\r\n        let id = this.props.match.params.id;\r\n        let url = '/api/user/' + id + '/reservations';\r\n        this.props.onGetData(url, { ...this.props })\r\n    }\r\n\r\n    renderTypeOfUserConditionally = (user) => {\r\n        let typeOfUser = null;\r\n     \r\n        if (user.reservations && user.reservations.length <= 2) {\r\n            typeOfUser = (\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Type of user:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <span className={'text-success'}>Beginner user.</span>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n        else {\r\n            typeOfUser = (\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Type of user:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <span className={'text-info'}>Advanced user.</span>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n     \r\n        return typeOfUser;\r\n    }\r\n\r\n    render() {\r\n       const user = this.props.data;\r\n \r\n        return (\r\n            <Aux>\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <strong>User name:</strong>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            {user.firstName} {user.lastName}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <strong>Phone:</strong>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            {user.phone}\r\n                        </Col>\r\n                    </Row>\r\n                    {this.renderTypeOfUserConditionally(user)}\r\n                <UsersReservations reservations={user.reservations} />\r\n            </Aux>\r\n        )\r\n    }\r\n}\r\n \r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.repository.data\r\n    }\r\n}\r\n \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetData: (url, props) => dispatch(repositoryActions.getData(url, props))\r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserDetails);","import React, {Component} from 'react';\r\n \r\nconst asyncComponent = (importComponent) => {\r\n    return class extends Component{\r\n        state = {\r\n            component: null\r\n        }\r\n \r\n        componentDidMount(){\r\n            importComponent()\r\n            .then(cmp => {\r\n                this.setState({component: cmp.default});\r\n            });\r\n        }\r\n        render(){\r\n            const C = this.state.component;\r\n \r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n}\r\n \r\nexport default asyncComponent;","import React from 'react';\r\nimport './InternalServer.css';\r\n \r\nconst internalServer = (props) => {\r\n    return (\r\n        <p className={'internalServer'}>{\"500 SERVER ERROR, CONTACT ADMINISTRATOR!!!!\"}</p>\r\n    )\r\n}\r\n \r\nexport default internalServer;","import React from 'react';\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\nimport { FormGroup, Col, FormControl, FormLabel } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './Input.css';\r\n \r\nconst input = (props) => {\r\n    let inputField = null;\r\n    let errorMessage = null;\r\n \r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        errorMessage = (<em>{props.errorMessage}</em>);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={FormLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        case 'datePicker':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={FormLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\r\n                            onChange={props.changed} className='datePickerControl' \r\n                            showYearDropdown dropdownMode=\"select\"/>\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        default: inputField = null;\r\n    }\r\n    \r\n    return (\r\n        <Aux>\r\n            {inputField}\r\n        </Aux>\r\n    )\r\n}\r\n \r\nexport default input;","\r\nexport const returnInputConfiguration = () => {\r\n    return {\r\n        firstName: {\r\n            element: 'input', type: 'text', value: '', \r\n            validation: { required: true }, valid: false, touched: false,\r\n            errorMessage: '', label: 'First name:'\r\n        },\r\n        lastName: {\r\n            element: 'input', type: 'text', value: '', \r\n            validation: { required: true }, valid: false, touched: false,\r\n            errorMessage: '', label: 'First name:'\r\n        },\r\n        phone: {\r\n            element: 'input', type: 'text', value: '', \r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Phone:'\r\n        },\r\n        email: {\r\n            element: 'input', type: 'text', value: '', \r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Email:'\r\n        }\r\n    }\r\n}","export const convertStateToArrayOfFormObjects = (formObject) => {\r\n    const formElementsArray = [];\r\n    for (let key in formObject) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formObject[key]\r\n        });\r\n    }\r\n \r\n    return formElementsArray;\r\n}\r\n\r\nconst checkValidity = (value, validation) => {\r\n    let validationObject = {\r\n        isValid: true,\r\n        errorMessage: ''\r\n    };\r\n \r\n    if (validation) {\r\n        if (validation.required) {\r\n            validationObject.isValid = value.trim() !== '';\r\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\r\n        }\r\n \r\n        if (validationObject.isValid && validation.maxLength) {\r\n            validationObject.isValid = value.length <= 60;\r\n            validationObject.errorMessage = 'Not allowed more than 60 charactes';\r\n        }\r\n \r\n        return validationObject;\r\n    }\r\n    else {\r\n        return validationObject;\r\n    }\r\n}\r\n\r\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\r\n    let formElement = { ...updatedOwnerForm[id] };\r\n    formElement.value = id === 'dateOfBirth' ? event : event.target.value;\r\n    formElement.touched = true;\r\n \r\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\r\n \r\n    formElement.valid = validationResponse.isValid;\r\n    formElement.errorMessage = validationResponse.errorMessage;\r\n \r\n    return formElement;\r\n}\r\n\r\nexport const countInvalidElements = (ownerForm) => {\r\n    let countInvalidElements = 0;\r\n    for (let element in ownerForm) {\r\n        if (!ownerForm[element].valid) {\r\n            countInvalidElements = countInvalidElements + 1;\r\n            break;\r\n        }\r\n    }\r\n    return countInvalidElements;\r\n}","import React from 'react';\r\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n \r\nconst successModal = (props) => {\r\n    return (\r\n        <Aux>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Aux>\r\n    )\r\n}\r\n \r\nexport default successModal;","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\r\nimport '../ModalStyles.css';\r\n \r\nconst errorModal = (props) => {\r\n    return (\r\n        <Aux>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Aux>\r\n    )\r\n}\r\n \r\nexport default errorModal;","import React, { Component } from 'react';\r\nimport Input from '../../../UI/Inputs/Input';\r\nimport { Form, Button, FormGroup, Col, Jumbotron } from 'react-bootstrap';\r\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\r\nimport * as formUtilityActions from '../../../Utility/FormUtility';\r\nimport { connect } from 'react-redux';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\n\r\nclass CreateUser extends Component {\r\n    state = {\r\n        userForm: {},\r\n        isFormValid: false\r\n    }\r\n \r\n    componentWillMount = () =>{\r\n        this.setState({ userForm: returnInputConfiguration() });\r\n    }\r\n\r\n    handleChangeEvent = (event, id) => {\r\n        const updatedUserForm = { ...this.state.userForm };\r\n        updatedUserForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedUserForm, id);\r\n     \r\n        const counter = formUtilityActions.countInvalidElements(updatedUserForm);\r\n     \r\n        this.setState({ userForm: updatedUserForm, isFormValid: counter === 0 })\r\n    }\r\n\r\n    createUser = (event) => {\r\n        event.preventDefault();\r\n     \r\n        const userToCreate = {\r\n            userType: 0,\r\n            password: '123',\r\n            firstName: this.state.userForm.firstName.value,\r\n            lastName: this.state.userForm.lastName.value,\r\n            phone: this.state.userForm.phone.value,\r\n            email: this.state.userForm.email.value\r\n        }\r\n     \r\n        const url = '/api/user';\r\n        this.props.onCreateUser(url, userToCreate, { ...this.props });\r\n    }\r\n\r\n    redirectToUserList = () => {\r\n        this.props.history.push('/user-List');\r\n    }\r\n    \r\n    render() { \r\n\r\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.userForm });\r\n\r\n        return ( \r\n            <Jumbotron>\r\n            <Form horizontal onSubmit={this.createUser}>\r\n                {\r\n                    formElementsArray.map(element => {\r\n                            return <Input key={element.id} elementType={element.config.element} \r\n                            id={element.id} label={element.config.label}\r\n                            type={element.config.type} value={element.config.value} \r\n                            changed={(event) => this.handleChangeEvent(event, element.id)}\r\n                            errorMessage={element.config.errorMessage} \r\n                            invalid={!element.config.valid} shouldValidate={element.config.validation}\r\n                            touched={element.config.touched} \r\n                            blur={(event) => this.handleChangeEvent(event, element.id)} />\r\n                    })\r\n                }\r\n                <br />\r\n                <FormGroup>\r\n                    <Col mdOffset={6} md={1}>\r\n                        <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Create</Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Button bsStyle='danger' onClick={this.redirectToUserList}>Cancel</Button>\r\n                    </Col>\r\n                </FormGroup>\r\n            </Form>\r\n            <SuccessModal show={this.props.showSuccessModal} \r\n                modalHeaderText={'Success message'} \r\n                modalBodyText={'Action completed successfully'}\r\n                okButtonText={'OK'} \r\n                successClick={() => this.props.onCloseSuccessModal('/user-List', { ...this.props })} />\r\n            \r\n            <ErrorModal show={this.props.showErrorModal} \r\n                    modalHeaderText={'Error message'} \r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'} closeModal={() => this.props.onCloseErrorModal()} />\r\n                        </Jumbotron>\r\n         )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showSuccessModal: state.repository.showSuccessModal,\r\n        showErrorModal: state.errorHandler.showErrorModal,\r\n        errorMessage: state.errorHandler.errorMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onCreateUser: (url, user, props) => dispatch(repositoryActions.postData(url, user, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateUser);","import React, { Component } from 'react';\r\nimport { Form, Jumbotron, Button, FormGroup, Col } from 'react-bootstrap';\r\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\r\nimport * as formUtilityActions from '../../../Utility/FormUtility';\r\nimport Input from '../../../UI/Inputs/Input';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport { connect } from 'react-redux';\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\n\r\nclass UpdateUser extends Component {\r\n    state = {\r\n        userForm: {},\r\n        isFormValid: true\r\n    }\r\n \r\n    componentWillMount = () => {\r\n        this.setState({ userForm: returnInputConfiguration() });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const id = this.props.match.params.id;\r\n        const url = '/api/user/' + id;\r\n        this.props.onGetUserById(url, { ...this.props });\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        const updatedUserForm = { ...this.state.userForm };\r\n        let firstNameObject = { ...updatedUserForm.firstName };\r\n        let lastNameObject = { ...updatedUserForm.lastName };\r\n        let phoneObject = { ...updatedUserForm.phone };\r\n        let emailObject = { ...updatedUserForm.email };\r\n     \r\n        //dateObject.value = moment(nextProps.data.dateOfBirth);\r\n        firstNameObject.value = nextProps.data.firstName;\r\n        firstNameObject.valid = true;\r\n        lastNameObject.value = nextProps.data.lastName;\r\n        lastNameObject.valid = true;\r\n        phoneObject.value = nextProps.data.phone;\r\n        phoneObject.valid = true;\r\n        emailObject.value = nextProps.data.email;\r\n        emailObject.valid = true;\r\n     \r\n        updatedUserForm['firstName'] = firstNameObject;\r\n        updatedUserForm['lastName'] = lastNameObject;\r\n        updatedUserForm['phone'] = phoneObject;\r\n        updatedUserForm['email'] = emailObject;\r\n        this.setState({ userForm: updatedUserForm });\r\n    }\r\n\r\n    handleChangeEvent = (event, id) => {\r\n        const updatedUserForm = { ...this.state.userForm };\r\n        updatedUserForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedUserForm, id);\r\n     \r\n        const counter = formUtilityActions.countInvalidElements(updatedUserForm);\r\n     \r\n        this.setState({ userForm: updatedUserForm, isFormValid: counter === 0 })\r\n    }\r\n\r\n    redirectToUserList = () => {\r\n        this.props.history.push('/user-List');\r\n    }\r\n     \r\n    updateUser = (event) => {\r\n        event.preventDefault();\r\n     \r\n        const userToUpdate = {\r\n            id: this.props.data.id,\r\n            userType: this.props.data.userType,\r\n            creationDate: this.props.data.creationDate,\r\n            password: this.props.data.password,\r\n            firstName: this.state.userForm.firstName.value,\r\n            lastName: this.state.userForm.lastName.value,\r\n            phone: this.state.userForm.phone.value,\r\n            email: this.state.userForm.email.value\r\n        }\r\n     \r\n        const url = \"/api/user/\" + this.props.data.id;\r\n     \r\n        this.props.onUpdateUser(url, userToUpdate, {...this.props});\r\n    }\r\n \r\n    render() { \r\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.userForm });\r\n        return (  \r\n            <Jumbotron>\r\n                <Form horizontal onSubmit={this.updateUser}>\r\n                    {\r\n                    formElementsArray.map(element => {\r\n                        return <Input key={element.id} elementType={element.config.element} \r\n                            id={element.id} label={element.config.label}\r\n                            type={element.config.type} value={element.config.value} \r\n                            changed={(event) => this.handleChangeEvent(event, element.id)}\r\n                            errorMessage={element.config.errorMessage} invalid={!element.config.valid} \r\n                            shouldValidate={element.config.validation}\r\n                            touched={element.config.touched} \r\n                            blur={(event) => this.handleChangeEvent(event, element.id)} />\r\n                    })\r\n                    }\r\n                    <br />\r\n                    <FormGroup>\r\n                    <Col mdOffset={6} md={1}>\r\n                        <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Button bsStyle='danger' onClick={this.redirectToUserList}>Cancel</Button>\r\n                    </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'} \r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'} \r\n                    successClick={() => this.props.onCloseSuccessModal('/user-List', { ...this.props })} />\r\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'} \r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'} \r\n                    closeModal={() => this.props.onCloseErrorModal()} />\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.repository.data,\r\n        showSuccessModal: state.repository.showSuccessModal,\r\n        showErrorModal: state.errorHandler.showErrorModal,\r\n        errorMessage: state.errorHandler.errorMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetUserById: (url, props) => dispatch(repositoryActions.getData(url, props)),\r\n        onUpdateUser: (url, user, props) => dispatch(repositoryActions.putData(url, user, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateUser);","import React, { Component } from 'react';\r\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport { connect } from 'react-redux';\r\nimport { Jumbotron, Button, Col, Row, FormLabel } from 'react-bootstrap';\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\n \r\nclass DeleteUser extends Component {\r\n    componentDidMount = () => {\r\n        const id = this.props.match.params.id;\r\n        const url = '/api/user/' + id;\r\n        this.props.onGetUserById(url, { ...this.props });\r\n    }\r\n\r\n    redirectToUserList = () => {\r\n        this.props.history.push('/user-List');\r\n    }\r\n\r\n    deleteUser = (event) => {\r\n        event.preventDefault();\r\n     \r\n        const url = \"/api/user/\" + this.props.data.id;\r\n     \r\n        this.props.onDeleteUser(url, { ...this.props });\r\n    }\r\n\r\n    render() { \r\n        let user = {...this.props.data};\r\n\r\n        return ( \r\n            <Aux>\r\n                <Row>\r\n                <Col md={10}>\r\n                    <Jumbotron>\r\n                        <Row>\r\n                            <Col md={3}>\r\n                                <FormLabel htmlFor='name'>Users name:</FormLabel>\r\n                            </Col>\r\n                            <Col md={7}>\r\n                                <span name='name'>{user.firstName} {user.lastName}</span>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={3}>\r\n                                <FormLabel htmlFor='phone'>Phone:</FormLabel>\r\n                            </Col>\r\n                            <Col md={7}>\r\n                                <span name='phone'>{user.phone}</span>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={3}>\r\n                                <FormLabel htmlFor='email'>Email:</FormLabel>\r\n                            </Col>\r\n                            <Col md={7}>\r\n                                <span name='email'>{user.email}</span>\r\n                            </Col>\r\n                            </Row>\r\n                    </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                <Col mdOffset={8} md={1}>\r\n                    <Button type=\"submit\" bsStyle=\"info\" onClick={this.deleteUser}>Delete</Button>\r\n                </Col>\r\n                <Col md={1}>\r\n                        <Button bsStyle='danger' onClick={this.redirectToUserList}>Cancel</Button>\r\n                </Col>\r\n                </Row>\r\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'}\r\n                    successClick={() => this.props.onCloseSuccessModal('/user-List', { ...this.props })} />\r\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'}\r\n                    closeModal={() => this.props.onCloseErrorModal()} />\r\n            </Aux>\r\n         )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n       data: state.repository.data,\r\n       showSuccessModal: state.repository.showSuccessModal,\r\n       showErrorModal: state.errorHandler.showErrorModal,\r\n       errorMessage: state.errorHandler.errorMessage\r\n    }\r\n  }\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetUserById: (url, props) => dispatch(repositoryActions.getData(url, props)),\r\n        onDeleteUser: (url, props) => dispatch(repositoryActions.deleteData(url, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n} \r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteUser);","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from '../components/Layout/Layout';\nimport Home from '../components/Home/Home';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport NotFound from '../components/ErrorPages/NotFound/NotFound';\n//import UserList from './User/UserList/UserList'; \nimport UserDetails from './User/UserDetails/UserDetails'; \nimport asyncComponent from '../hoc/AsyncComponent/AsyncComponent';\nimport InternalServer from '../components/ErrorPages/InternalServer/InternalServer';\nimport CreateUser from './User/CreateUser/CreateUser';\nimport UpdateUser from './User/UpdateUser/UpdateUser';\nimport DeleteUser from './User/DeleteUser/DeleteUser';\n\nconst AsyncUserList = asyncComponent(() => {\n  return import('./User/UserList/UserList');\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Layout>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/user-list\" component={AsyncUserList} />\n            <Route path=\"/userDetails/:id\" component={UserDetails} />\n            <Route path=\"/createUser\" component={CreateUser} />\n            <Route path=\"/updateUser/:id\" component={UpdateUser} />\n            <Route path=\"/deleteUser/:id\" component={DeleteUser} />\n            <Route path=\"/500\" component={InternalServer} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </Layout>\n      </BrowserRouter>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n \r\nconst initialState = {\r\n    data: null,\r\n    showSuccessModal: false\r\n}\r\n\r\n\r\nconst executeCloseSuccessModal = (state, action) => {\r\n    action.props.history.push(action.url);\r\n    return {\r\n        ...state,\r\n        showSuccessModal: false\r\n    }\r\n}\r\n\r\nconst executeGetDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        data: action.data\r\n    }\r\n}\r\n \r\nconst executePostDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showSuccessModal: true\r\n    }\r\n}\r\n \r\nconst executePutDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showSuccessModal: true\r\n    }\r\n}\r\n \r\nconst executeDeleteDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showSuccessModal: true\r\n    }\r\n}\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.GET_DATA_SUCCESS:\r\n            return executeGetDataSuccess(state, action);\r\n        case actionTypes.POST_DATA_SUCCESS:\r\n            return executePostDataSuccess(state, action);\r\n        case actionTypes.PUT_DATA_SUCCESS:\r\n            return executePutDataSuccess(state, action);\r\n        case actionTypes.DELETE_DATA_SUCCESS:\r\n            return executeDeleteDataSuccess(state, action);\r\n        case actionTypes.CLOSE_SUCCESS_MODAL:\r\n            return executeCloseSuccessModal(state, action)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n \r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n \r\nconst initialState = {\r\n    showErrorModal: false,\r\n    errorMessage: ''\r\n}\r\n \r\nconst execute404 = (state, action) => {\r\n    action.props.history.push('/404');\r\n    return { ...state };\r\n}\r\n \r\nconst execute500 = (state, action) => {\r\n    action.props.history.push('/500');\r\n    return { ...state };\r\n}\r\n \r\nconst executeOtherError = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showErrorModal: true,\r\n        errorMessage: action.error.response.data\r\n    };\r\n}\r\n\r\nconst executeCloseErrorModal = (state, action) => {\r\n    return{\r\n        ...state,\r\n        showErrorModal: false,\r\n        errorMessage: ''\r\n    }\r\n}\r\n \r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.HTTP_404_ERROR:\r\n            return execute404(state, action);\r\n        case actionTypes.HTTP_500_ERROR:\r\n            return execute500(state, action);\r\n        case actionTypes.HTTP_OTHER_ERROR:\r\n            return executeOtherError(state, action);\r\n        case actionTypes.CLOSE_ERROR_MODAL:\r\n            return executeCloseErrorModal(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n \r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport repositoryReducer from './store/reducers/repositoryReducer';\nimport errorHandlerReducer from './store/reducers/errorHandlerReducer';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst rootReducers = combineReducers({\n    repository: repositoryReducer,\n    errorHandler: errorHandlerReducer\n})\n\nconst store = createStore(rootReducers, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as actionTypes from './actionTypes';\r\n \r\nconst execute404Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n \r\nconst execute500Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n \r\nconst executeOtherErrorHandler = (error) => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n \r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}\r\n\r\nexport const closeErrorModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}","const auxiliary = (props) => props.children;\r\n \r\nexport default auxiliary;","export const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\r\nexport const POST_DATA_SUCCESS = 'POST_DATA_SUCCESS';\r\nexport const PUT_DATA_SUCCESS = 'PUT_DATA_SUCCESS';\r\nexport const DELETE_DATA_SUCCESS = 'DELETE_DATA_SUCCESS';\r\n\r\nexport const HTTP_404_ERROR = 'HTTP_404_ERROR';\r\nexport const HTTP_500_ERROR = 'HTTP_500_ERROR';\r\nexport const HTTP_OTHER_ERROR = 'HTTP_OTHER_ERROR';\r\n\r\nexport const CLOSE_ERROR_MODAL = 'CLOSE_ERROR_MODAL';\r\nexport const CLOSE_SUCCESS_MODAL = 'CLOSE_SUCCESS_MODAL';"],"sourceRoot":""}